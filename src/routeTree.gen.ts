/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SmgRouteImport } from './routes/smg'
import { Route as SetupRouteImport } from './routes/setup'
import { Route as OverviewRouteImport } from './routes/overview'
import { Route as OmegaDailyRouteImport } from './routes/omega-daily'
import { Route as InterviewsRouteImport } from './routes/interviews'
import { Route as GoalsRouteImport } from './routes/goals'
import { Route as IndexRouteImport } from './routes/index'

const SmgRoute = SmgRouteImport.update({
  id: '/smg',
  path: '/smg',
  getParentRoute: () => rootRouteImport,
} as any)
const SetupRoute = SetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRouteImport,
} as any)
const OverviewRoute = OverviewRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => rootRouteImport,
} as any)
const OmegaDailyRoute = OmegaDailyRouteImport.update({
  id: '/omega-daily',
  path: '/omega-daily',
  getParentRoute: () => rootRouteImport,
} as any)
const InterviewsRoute = InterviewsRouteImport.update({
  id: '/interviews',
  path: '/interviews',
  getParentRoute: () => rootRouteImport,
} as any)
const GoalsRoute = GoalsRouteImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/goals': typeof GoalsRoute
  '/interviews': typeof InterviewsRoute
  '/omega-daily': typeof OmegaDailyRoute
  '/overview': typeof OverviewRoute
  '/setup': typeof SetupRoute
  '/smg': typeof SmgRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/goals': typeof GoalsRoute
  '/interviews': typeof InterviewsRoute
  '/omega-daily': typeof OmegaDailyRoute
  '/overview': typeof OverviewRoute
  '/setup': typeof SetupRoute
  '/smg': typeof SmgRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/goals': typeof GoalsRoute
  '/interviews': typeof InterviewsRoute
  '/omega-daily': typeof OmegaDailyRoute
  '/overview': typeof OverviewRoute
  '/setup': typeof SetupRoute
  '/smg': typeof SmgRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/goals'
    | '/interviews'
    | '/omega-daily'
    | '/overview'
    | '/setup'
    | '/smg'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/goals'
    | '/interviews'
    | '/omega-daily'
    | '/overview'
    | '/setup'
    | '/smg'
  id:
    | '__root__'
    | '/'
    | '/goals'
    | '/interviews'
    | '/omega-daily'
    | '/overview'
    | '/setup'
    | '/smg'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GoalsRoute: typeof GoalsRoute
  InterviewsRoute: typeof InterviewsRoute
  OmegaDailyRoute: typeof OmegaDailyRoute
  OverviewRoute: typeof OverviewRoute
  SetupRoute: typeof SetupRoute
  SmgRoute: typeof SmgRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/smg': {
      id: '/smg'
      path: '/smg'
      fullPath: '/smg'
      preLoaderRoute: typeof SmgRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/overview': {
      id: '/overview'
      path: '/overview'
      fullPath: '/overview'
      preLoaderRoute: typeof OverviewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/omega-daily': {
      id: '/omega-daily'
      path: '/omega-daily'
      fullPath: '/omega-daily'
      preLoaderRoute: typeof OmegaDailyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/interviews': {
      id: '/interviews'
      path: '/interviews'
      fullPath: '/interviews'
      preLoaderRoute: typeof InterviewsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/goals': {
      id: '/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof GoalsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GoalsRoute: GoalsRoute,
  InterviewsRoute: InterviewsRoute,
  OmegaDailyRoute: OmegaDailyRoute,
  OverviewRoute: OverviewRoute,
  SetupRoute: SetupRoute,
  SmgRoute: SmgRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
